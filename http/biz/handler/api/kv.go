// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/cqkv/cqkv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "github.com/cqkv/cqkv/http/biz/model/api"
)

var db *cqkv.DB

func init() {
	var err error
	db, err = cqkv.Open("./tmp/")
	if err != nil {
		panic(err)
	}
}

// Get .
// @router /cqkv [GET]
func Get(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetResp)
	resp.BaseResp = new(api.BaseResp)

	value, err := db.Get([]byte(req.Key))
	if err != nil {
		resp.BaseResp.Code = "500"
		resp.BaseResp.Msg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.BaseResp.Code = "0"
	resp.BaseResp.Msg = "success"
	resp.Value = string(value)

	c.JSON(consts.StatusOK, resp)
}

// Put .
// @router /cqkv [POST]
func Put(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PutReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.PutResp)
	resp.BaseResp = new(api.BaseResp)

	err = db.Put([]byte(req.Key), []byte(req.Value))
	if err != nil {
		resp.BaseResp.Code = "500"
		resp.BaseResp.Msg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.BaseResp.Code = "0"
	resp.BaseResp.Msg = "success"

	c.JSON(consts.StatusOK, resp)
}

// Delete .
// @router /cqkv [DELETE]
func Delete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DeleteResp)
	resp.BaseResp = new(api.BaseResp)

	err = db.Delete([]byte(req.Key))
	if err != nil {
		resp.BaseResp.Code = "500"
		resp.BaseResp.Msg = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.BaseResp.Code = "0"
	resp.BaseResp.Msg = "success"

	c.JSON(consts.StatusOK, resp)
}

// ListKeys .
// @router /cqkv/keys [GET]
func ListKeys(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListKeysReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.ListKeysResp)
	resp.BaseResp = new(api.BaseResp)

	resp.BaseResp.Code = "0"
	resp.BaseResp.Msg = "success"

	keys := db.ListKeys()
	resp.Keys = make([]string, 0, len(keys))
	for _, v := range keys {
		resp.Keys = append(resp.Keys, string(v[1:]))
	}

	c.JSON(consts.StatusOK, resp)
}

// Stat .
// @router /cqkv/stat [GET]
func Stat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.StatReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.StatResp)
	resp.BaseResp = new(api.BaseResp)

	resp.BaseResp.Code = "0"
	resp.BaseResp.Msg = "success"

	c.JSON(consts.StatusOK, resp)
}
